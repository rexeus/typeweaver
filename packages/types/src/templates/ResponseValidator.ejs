/* eslint-disable */
/**
 * This file was automatically generated by TypeWeaver.
 * DO NOT EDIT. Instead, modify the source definition file and generate again.
 * 
 * @generated by @rexeus/typeweaver
 */

import definition from "<%= sourcePath %>";
import type { ZodSafeParseResult } from "zod/v4";
import { 
    type IHttpResponse,
    type SafeResponseValidationResult,
    ResponseValidationError
} from "@rexeus/typeweaver-core";
import {
    ResponseValidator,
} from "../lib/types";
import {
type <%= pascalCaseOperationId %>Response,
<% for (const ownResponse of ownResponses) { %>
    type I<%= ownResponse.name %>Response,
    <%= ownResponse.name %>Response,
<% } %>
} from "<%= responseFile %>";
<% for (const sharedResponse of sharedResponses) { %>
    import {
        type I<%= sharedResponse.name %>Response,
        <%= sharedResponse.name %>Response,
    } from "<%= sharedResponse.importPath %>";
<% } %>

export class <%= pascalCaseOperationId %>ResponseValidator extends ResponseValidator {
    public safeValidate(response: IHttpResponse): SafeResponseValidationResult<<%= pascalCaseOperationId %>Response> {
        const result = this.validateAgainstDefinedResponses(response);

        if(!result.isValid && !result.error.hasResponseIssues()) {
            result.error.addStatusCodeIssue([
                <% const sortedStatusCodes = allStatusCodes.map(statusCode => statusCode.statusCode).sort() %>
                <% for (const statusCode of sortedStatusCodes) { %><%= statusCode %>,<% } %>
            ]);
        }

        return result;
    }

    public validate(response: IHttpResponse): <%= pascalCaseOperationId %>Response {
        const result = this.safeValidate(response);
    
        if (!result.isValid) {
          throw result.error;
        }
    
        return result.data;
    }

    private validateAgainstDefinedResponses(response: IHttpResponse): SafeResponseValidationResult<<%= pascalCaseOperationId %>Response> {
        const error = new ResponseValidationError(response.statusCode);

        <% for (const statusCode of allStatusCodes) { %>
            if (response.statusCode === <%= statusCode.statusCode %>) {
            <%
            for (const response of [...ownResponses, ...sharedResponses]) {
            if (response.statusCode === statusCode.statusCode) {
            %>
                const validate<%= response.name %>ResponseResult = this.validate<%= response.name %>Response(response, error);
                if (validate<%= response.name %>ResponseResult.isValid) {
                    return validate<%= response.name %>ResponseResult;
                }
            <% } } %>
            }

        <% } %>

        return {
            isValid: false,
            error
        };
    }

    <% for (const response of [...ownResponses, ...sharedResponses]) { %>
    private validate<%= response.name %>Response(response: IHttpResponse, error: ResponseValidationError): SafeResponseValidationResult<<%= response.name %>Response> {
        const result = this.validateResponseType<<%= response.name %>Response>(
            "<%= response.name.replace(/Response$/, '') %>",
            <% if(response.hasHeader) { %>definition.responses[<%= response.index %>] && "header" in definition.responses[<%= response.index %>] ? definition.responses[<%= response.index %>]!.header : undefined<% } else { %>undefined<% } %>,
            <% if(response.hasBody) { %>definition.responses[<%= response.index %>] && "body" in definition.responses[<%= response.index %>] ? definition.responses[<%= response.index %>]!.body : undefined<% } else { %>undefined<% } %>,
        )(response, error);

        if (!result.isValid) {
            return result;
        }

        return { isValid: true, data: new <%= response.name %>Response(result.data as I<%= response.name %>Response) };
    }
    <% } %>
}