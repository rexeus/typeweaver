import definition from "<%= sourcePath %>";
import { type IHttpRequest } from "@rexeus/typeweaver-core";
import {
  type SafeRequestValidationResult,
  RequestValidator,
  RequestValidationError,
} from "../lib/types";
import type { I<%= pascalCaseOperationId %>Request } from "<%= requestFile %>";

export class <%= pascalCaseOperationId %>RequestValidator extends RequestValidator {
    public safeValidate(request: IHttpRequest): SafeRequestValidationResult<I<%= pascalCaseOperationId %>Request> {
        const error = new RequestValidationError();
        const validatedRequest: IHttpRequest = {
            method: request.method,
            path: request.path,
            query: undefined,
            header: undefined,
            body: undefined,
            param: undefined,
        };

        <% if(body) { %>
            if (definition.request.body) {
                const result = definition.request.body.safeParse(request.body);
          
                if (!result.success) {
                  error.addBodyIssues(result.error.issues);
                } else {
                  validatedRequest.body = result.data;
                }
            }
        <% } %>

        <% if(header) { %>
            if (definition.request.header) {
                const result = definition.request.header.safeParse(request.header);
          
                if (!result.success) {
                  error.addHeaderIssues(result.error.issues);
                } else {
                  validatedRequest.header = result.data;
                }
            }
        <% } %>

        <% if(param) { %>
            if (definition.request.param) {
                const result = definition.request.param.safeParse(request.param);
          
                if (!result.success) {
                  error.addPathParamIssues(result.error.issues);
                } else {
                  validatedRequest.param = result.data;
                }
            }
        <% } %>

        <% if(query) { %>
            if (definition.request.query) {
                const result = definition.request.query.safeParse(request.query);
          
                if (!result.success) {
                  error.addQueryIssues(result.error.issues);
                } else {
                  validatedRequest.query = result.data;
                }
            }
        <% } %>

        if (error.hasIssues()) {
            return {
              isValid: false,
              error,
            };
          }
      
          return {
            isValid: true,
            data: validatedRequest as I<%= pascalCaseOperationId %>Request,
          };
    }

    public validate(request: IHttpRequest): I<%= pascalCaseOperationId %>Request {
        const result = this.safeValidate(request);
    
        if (!result.isValid) {
          throw result.error;
        }
    
        return result.data;
      }
}