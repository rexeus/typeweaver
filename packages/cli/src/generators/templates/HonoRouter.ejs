import { type HonoHttpRoute, type HonoHttpRequestHandler, HttpMethod, HonoHttpRouter } from "<%= coreDir %>";
<% for(const route of routes) { %>
import type { I<%= route.pascalCaseOperationId %>Request } from "<%= route.requestFile %>";
import type { <%= route.pascalCaseOperationId %>SuccessResponses, I<%= route.pascalCaseOperationId %>Response } from "<%= route.responseFile %>";
import { <%= route.pascalCaseOperationId %>RequestValidator } from "<%= route.requestValidatorFile %>";
<% } %>

export type <%= pascalCaseEntityName %>HonoRouterHandler = {
<% for(const route of routes) { %>
    handle<%= route.pascalCaseOperationId %>Request: HonoHttpRequestHandler<I<%= route.pascalCaseOperationId %>Request, <%= route.pascalCaseOperationId %>SuccessResponses>;
<% } %>
};

type <%= pascalCaseEntityName %>Routes = readonly [
<% for(const route of routes) { %>
    HonoHttpRoute<HttpMethod.<%= route.method %>, "<%= route.path %>", I<%= route.pascalCaseOperationId %>Request, I<%= route.pascalCaseOperationId %>Response, <%= route.pascalCaseOperationId %>RequestValidator>,
<% } %>
];

export class <%= pascalCaseEntityName %>HonoRouter extends HonoHttpRouter<<%= pascalCaseEntityName %>Routes> {
    private readonly routes: <%= pascalCaseEntityName %>Routes;

    public constructor(
        private readonly handler: <%= pascalCaseEntityName %>HonoRouterHandler
    ) {
        super();

        this.routes = [
            <% for(const route of routes) { %>
                {
                    path: "<%= route.path %>",
                    method: HttpMethod.<%= route.method %>,
                    handler: this.handler.handle<%= route.pascalCaseOperationId %>Request,
                    validator: new <%= route.pascalCaseOperationId %>RequestValidator(),
                },
            <% } %>
        ] as const;
    }

    public getRoutes(): <%= pascalCaseEntityName %>Routes {
        return this.routes;
    }
}