/**
 * This file was automatically generated by typeweaver.
 * DO NOT EDIT. Instead, modify the source definition file and generate again.
 *
 * @generated by @rexeus/typeweaver
 */

import type {
  HttpBodySchema,
  HttpHeaderSchema,
  IHttpResponse,
  IResponseValidator,
  ResponseValidationError,
  SafeResponseValidationResult,
} from "@rexeus/typeweaver-core";
import { Validator } from "./Validator";
import type { ZodSafeParseResult } from "zod/v4";

/**
 * Abstract base class for HTTP response validation.
 *
 * This class provides the foundation for response validators that:
 * - Validate response status codes match expected values
 * - Validate response headers and body against schemas
 * - Support both safe (non-throwing) and unsafe (throwing) validation
 * - Integrate with Zod schemas for runtime validation
 *
 * Response validators are typically used in API clients to ensure
 * responses match the expected format before processing.
 */
export abstract class ResponseValidator
  extends Validator
  implements IResponseValidator
{
  /**
   * Validates a response without throwing errors.
   *
   * @param response - The HTTP response to validate
   * @returns A result object containing either the validated response or error details
   */
  public abstract safeValidate(
    response: IHttpResponse,
  ): SafeResponseValidationResult<IHttpResponse>;

  /**
   * Validates a response and throws if validation fails.
   *
   * @param response - The HTTP response to validate
   * @returns The validated response with proper typing
   * @throws {InvalidResponseStatusCodeError} If status code doesn't match expected
   * @throws {ResponseValidationError} If response structure fails validation
   */
  public abstract validate(response: IHttpResponse): IHttpResponse;

  /**
   * Generic response validation method that validates header and body schemas.
   * This method reduces code duplication across individual response validators.
   *
   * @param responseName - Name of the response type for error reporting
   * @param headerSchema - Zod schema for header validation (optional)
   * @param bodySchema - Zod schema for body validation (optional)
   * @returns Function that validates response and returns result
   */
  protected validateResponseType<Response extends IHttpResponse>(
    responseName: string,
    headerSchema: HttpHeaderSchema | undefined,
    bodySchema: HttpBodySchema | undefined,
  ): (
    response: IHttpResponse,
    error: ResponseValidationError,
  ) => SafeResponseValidationResult<Response> {
    return (response, error) => {
      let isValid = true;
      const validatedResponse: IHttpResponse = {
        statusCode: response.statusCode,
        header: undefined,
        body: undefined,
      };

      if (bodySchema) {
        const validateBodyResult = bodySchema.safeParse(
          response.body,
        ) as unknown as ZodSafeParseResult<Response["body"]>;

        if (!validateBodyResult.success) {
          error.addBodyIssues(responseName, validateBodyResult.error.issues);
          isValid = false;
        } else {
          validatedResponse.body = validateBodyResult.data;
        }
      }

      if (headerSchema) {
        const coercedHeader = this.coerceHeaderToSchema(
          response.header,
          headerSchema.shape,
        );
        const validateHeaderResult = headerSchema.safeParse(
          coercedHeader,
        ) as unknown as ZodSafeParseResult<Response["header"]>;

        if (!validateHeaderResult.success) {
          error.addHeaderIssues(
            responseName,
            validateHeaderResult.error.issues,
          );
          isValid = false;
        } else {
          validatedResponse.header = validateHeaderResult.data;
        }
      }

      if (!isValid) {
        return { isValid: false, error };
      }

      return { isValid: true, data: validatedResponse as Response };
    };
  }
}
