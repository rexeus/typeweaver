/* eslint-disable */
/**
 * This file was automatically generated by TypeWeaver.
 * DO NOT EDIT. Instead, modify the source definition file and generate again.
 *
 * @generated by @rexeus/typeweaver
 */

import definition from "../definition/specimen/PutSpecimenDefinition";
import type { ZodSafeParseResult } from "zod/v4";
import {
  type IHttpResponse,
  type SafeResponseValidationResult,
  ResponseValidationError,
} from "@rexeus/typeweaver-core";
import { ResponseValidator } from "../lib/types";
import {
  type PutSpecimenResponse,
  type IPutSpecimenSuccessResponse,
  PutSpecimenSuccessResponse,
} from "./PutSpecimenResponse";

import {
  type ISpecimenConflictErrorResponse,
  SpecimenConflictErrorResponse,
} from "./SpecimenConflictErrorResponse";

import {
  type ISpecimenNotFoundErrorResponse,
  SpecimenNotFoundErrorResponse,
} from "./SpecimenNotFoundErrorResponse";

import {
  type ISpecimenUnprocessableEntityErrorResponse,
  SpecimenUnprocessableEntityErrorResponse,
} from "./SpecimenUnprocessableEntityErrorResponse";

import {
  type IForbiddenErrorResponse,
  ForbiddenErrorResponse,
} from "../shared/ForbiddenErrorResponse";

import {
  type IInternalServerErrorResponse,
  InternalServerErrorResponse,
} from "../shared/InternalServerErrorResponse";

import {
  type ITooManyRequestsErrorResponse,
  TooManyRequestsErrorResponse,
} from "../shared/TooManyRequestsErrorResponse";

import {
  type IUnauthorizedErrorResponse,
  UnauthorizedErrorResponse,
} from "../shared/UnauthorizedErrorResponse";

import {
  type IUnsupportedMediaTypeErrorResponse,
  UnsupportedMediaTypeErrorResponse,
} from "../shared/UnsupportedMediaTypeErrorResponse";

import {
  type IValidationErrorResponse,
  ValidationErrorResponse,
} from "../shared/ValidationErrorResponse";

export class PutSpecimenResponseValidator extends ResponseValidator {
  public safeValidate(
    response: IHttpResponse,
  ): SafeResponseValidationResult<PutSpecimenResponse> {
    const result = this.validateAgainstDefinedResponses(response);

    if (!result.isValid && !result.error.hasResponseIssues()) {
      result.error.addStatusCodeIssue([
        200, 400, 401, 403, 404, 409, 415, 422, 429, 500,
      ]);
    }

    return result;
  }

  public validate(response: IHttpResponse): PutSpecimenResponse {
    const result = this.safeValidate(response);

    if (!result.isValid) {
      throw result.error;
    }

    return result.data;
  }

  private validateAgainstDefinedResponses(
    response: IHttpResponse,
  ): SafeResponseValidationResult<PutSpecimenResponse> {
    const error = new ResponseValidationError(response.statusCode);

    if (response.statusCode === 200) {
      const validatePutSpecimenSuccessResponseResult =
        this.validatePutSpecimenSuccessResponse(response, error);
      if (validatePutSpecimenSuccessResponseResult.isValid) {
        return validatePutSpecimenSuccessResponseResult;
      }
    }

    if (response.statusCode === 409) {
      const validateSpecimenConflictErrorResponseResult =
        this.validateSpecimenConflictErrorResponse(response, error);
      if (validateSpecimenConflictErrorResponseResult.isValid) {
        return validateSpecimenConflictErrorResponseResult;
      }
    }

    if (response.statusCode === 404) {
      const validateSpecimenNotFoundErrorResponseResult =
        this.validateSpecimenNotFoundErrorResponse(response, error);
      if (validateSpecimenNotFoundErrorResponseResult.isValid) {
        return validateSpecimenNotFoundErrorResponseResult;
      }
    }

    if (response.statusCode === 422) {
      const validateSpecimenUnprocessableEntityErrorResponseResult =
        this.validateSpecimenUnprocessableEntityErrorResponse(response, error);
      if (validateSpecimenUnprocessableEntityErrorResponseResult.isValid) {
        return validateSpecimenUnprocessableEntityErrorResponseResult;
      }
    }

    if (response.statusCode === 403) {
      const validateForbiddenErrorResponseResult =
        this.validateForbiddenErrorResponse(response, error);
      if (validateForbiddenErrorResponseResult.isValid) {
        return validateForbiddenErrorResponseResult;
      }
    }

    if (response.statusCode === 500) {
      const validateInternalServerErrorResponseResult =
        this.validateInternalServerErrorResponse(response, error);
      if (validateInternalServerErrorResponseResult.isValid) {
        return validateInternalServerErrorResponseResult;
      }
    }

    if (response.statusCode === 429) {
      const validateTooManyRequestsErrorResponseResult =
        this.validateTooManyRequestsErrorResponse(response, error);
      if (validateTooManyRequestsErrorResponseResult.isValid) {
        return validateTooManyRequestsErrorResponseResult;
      }
    }

    if (response.statusCode === 401) {
      const validateUnauthorizedErrorResponseResult =
        this.validateUnauthorizedErrorResponse(response, error);
      if (validateUnauthorizedErrorResponseResult.isValid) {
        return validateUnauthorizedErrorResponseResult;
      }
    }

    if (response.statusCode === 415) {
      const validateUnsupportedMediaTypeErrorResponseResult =
        this.validateUnsupportedMediaTypeErrorResponse(response, error);
      if (validateUnsupportedMediaTypeErrorResponseResult.isValid) {
        return validateUnsupportedMediaTypeErrorResponseResult;
      }
    }

    if (response.statusCode === 400) {
      const validateValidationErrorResponseResult =
        this.validateValidationErrorResponse(response, error);
      if (validateValidationErrorResponseResult.isValid) {
        return validateValidationErrorResponseResult;
      }
    }

    return {
      isValid: false,
      error,
    };
  }

  private validatePutSpecimenSuccessResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<PutSpecimenSuccessResponse> {
    const result = this.validateResponseType<PutSpecimenSuccessResponse>(
      "PutSpecimenSuccess",
      definition.responses[0] && "header" in definition.responses[0]
        ? definition.responses[0]!.header
        : undefined,
      definition.responses[0] && "body" in definition.responses[0]
        ? definition.responses[0]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new PutSpecimenSuccessResponse(
        result.data as IPutSpecimenSuccessResponse,
      ),
    };
  }

  private validateSpecimenConflictErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<SpecimenConflictErrorResponse> {
    const result = this.validateResponseType<SpecimenConflictErrorResponse>(
      "SpecimenConflictError",
      definition.responses[1] && "header" in definition.responses[1]
        ? definition.responses[1]!.header
        : undefined,
      definition.responses[1] && "body" in definition.responses[1]
        ? definition.responses[1]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new SpecimenConflictErrorResponse(
        result.data as ISpecimenConflictErrorResponse,
      ),
    };
  }

  private validateSpecimenNotFoundErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<SpecimenNotFoundErrorResponse> {
    const result = this.validateResponseType<SpecimenNotFoundErrorResponse>(
      "SpecimenNotFoundError",
      definition.responses[2] && "header" in definition.responses[2]
        ? definition.responses[2]!.header
        : undefined,
      definition.responses[2] && "body" in definition.responses[2]
        ? definition.responses[2]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new SpecimenNotFoundErrorResponse(
        result.data as ISpecimenNotFoundErrorResponse,
      ),
    };
  }

  private validateSpecimenUnprocessableEntityErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<SpecimenUnprocessableEntityErrorResponse> {
    const result =
      this.validateResponseType<SpecimenUnprocessableEntityErrorResponse>(
        "SpecimenUnprocessableEntityError",
        definition.responses[3] && "header" in definition.responses[3]
          ? definition.responses[3]!.header
          : undefined,
        definition.responses[3] && "body" in definition.responses[3]
          ? definition.responses[3]!.body
          : undefined,
      )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new SpecimenUnprocessableEntityErrorResponse(
        result.data as ISpecimenUnprocessableEntityErrorResponse,
      ),
    };
  }

  private validateForbiddenErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<ForbiddenErrorResponse> {
    const result = this.validateResponseType<ForbiddenErrorResponse>(
      "ForbiddenError",
      definition.responses[4] && "header" in definition.responses[4]
        ? definition.responses[4]!.header
        : undefined,
      definition.responses[4] && "body" in definition.responses[4]
        ? definition.responses[4]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new ForbiddenErrorResponse(result.data as IForbiddenErrorResponse),
    };
  }

  private validateInternalServerErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<InternalServerErrorResponse> {
    const result = this.validateResponseType<InternalServerErrorResponse>(
      "InternalServerError",
      definition.responses[5] && "header" in definition.responses[5]
        ? definition.responses[5]!.header
        : undefined,
      definition.responses[5] && "body" in definition.responses[5]
        ? definition.responses[5]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new InternalServerErrorResponse(
        result.data as IInternalServerErrorResponse,
      ),
    };
  }

  private validateTooManyRequestsErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<TooManyRequestsErrorResponse> {
    const result = this.validateResponseType<TooManyRequestsErrorResponse>(
      "TooManyRequestsError",
      definition.responses[6] && "header" in definition.responses[6]
        ? definition.responses[6]!.header
        : undefined,
      definition.responses[6] && "body" in definition.responses[6]
        ? definition.responses[6]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new TooManyRequestsErrorResponse(
        result.data as ITooManyRequestsErrorResponse,
      ),
    };
  }

  private validateUnauthorizedErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<UnauthorizedErrorResponse> {
    const result = this.validateResponseType<UnauthorizedErrorResponse>(
      "UnauthorizedError",
      definition.responses[7] && "header" in definition.responses[7]
        ? definition.responses[7]!.header
        : undefined,
      definition.responses[7] && "body" in definition.responses[7]
        ? definition.responses[7]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new UnauthorizedErrorResponse(
        result.data as IUnauthorizedErrorResponse,
      ),
    };
  }

  private validateUnsupportedMediaTypeErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<UnsupportedMediaTypeErrorResponse> {
    const result = this.validateResponseType<UnsupportedMediaTypeErrorResponse>(
      "UnsupportedMediaTypeError",
      definition.responses[8] && "header" in definition.responses[8]
        ? definition.responses[8]!.header
        : undefined,
      definition.responses[8] && "body" in definition.responses[8]
        ? definition.responses[8]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new UnsupportedMediaTypeErrorResponse(
        result.data as IUnsupportedMediaTypeErrorResponse,
      ),
    };
  }

  private validateValidationErrorResponse(
    response: IHttpResponse,
    error: ResponseValidationError,
  ): SafeResponseValidationResult<ValidationErrorResponse> {
    const result = this.validateResponseType<ValidationErrorResponse>(
      "ValidationError",
      definition.responses[9] && "header" in definition.responses[9]
        ? definition.responses[9]!.header
        : undefined,
      definition.responses[9] && "body" in definition.responses[9]
        ? definition.responses[9]!.body
        : undefined,
    )(response, error);

    if (!result.isValid) {
      return result;
    }

    return {
      isValid: true,
      data: new ValidationErrorResponse(
        result.data as IValidationErrorResponse,
      ),
    };
  }
}
