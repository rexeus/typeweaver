/* eslint-disable */
/**
 * This file was automatically generated by typeweaver.
 * DO NOT EDIT. Instead, modify the source definition file and generate again.
 *
 * @generated by @rexeus/typeweaver
 */

import definition from "../definition/todo/queries/ListTodosDefinition";
import {
  HttpMethod,
  type IHttpResponse,
  ResponseValidationError,
  UnknownResponse,
} from "@rexeus/typeweaver-core";
import { RequestCommand, type ProcessResponseOptions } from "../lib/clients";
import { ListTodosResponseValidator } from "./ListTodosResponseValidator";
import type {
  IListTodosRequest,
  IListTodosRequestHeader,
  IListTodosRequestQuery,
  SuccessfulListTodosResponse,
} from "./ListTodosRequest";

import { ListTodosSuccessResponse } from "./ListTodosResponse";

export class ListTodosRequestCommand
  extends RequestCommand
  implements IListTodosRequest
{
  public override readonly method = definition.method as HttpMethod.GET;
  public override readonly path = definition.path;

  public override readonly header: IListTodosRequestHeader;
  declare public readonly param: undefined;
  public override readonly query: IListTodosRequestQuery;
  declare public readonly body: undefined;

  private readonly responseValidator: ListTodosResponseValidator;

  public constructor(input: Omit<IListTodosRequest, "method" | "path">) {
    super();

    this.header = input.header;

    this.query = input.query;

    this.responseValidator = new ListTodosResponseValidator();
  }

  public processResponse(
    response: IHttpResponse,
    options: ProcessResponseOptions,
  ): SuccessfulListTodosResponse {
    try {
      const result = this.responseValidator.validate(response);

      if (result instanceof ListTodosSuccessResponse) {
        return result;
      }

      throw result;
    } catch (error) {
      if (error instanceof ResponseValidationError) {
        const unknownResponse = new UnknownResponse(
          response.statusCode,
          response.header,
          response.body,
          error,
        );

        if (
          options.unknownResponseHandling === "passthrough" &&
          options.isSuccessStatusCode(response.statusCode)
        ) {
          return unknownResponse as any;
        }

        throw unknownResponse;
      }
      throw error;
    }
  }
}
