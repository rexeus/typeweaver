/* eslint-disable */
/**
 * This file was automatically generated by TypeWeaver.
 * DO NOT EDIT. Instead, modify the source definition file and generate again.
 * 
 * @generated by @rexeus/typeweaver
 */

import definition from "<%= sourcePath %>";
import { HttpMethod, type IHttpResponse, ResponseValidationError, UnknownResponse } from "@rexeus/typeweaver-core";
import { RequestCommand, type ProcessResponseOptions } from "../lib/clients";
import { <%= pascalCaseOperationId %>ResponseValidator } from "<%= responseValidatorFile %>";
import type {
    I<%= pascalCaseOperationId %>Request,
    <%= headerTsType ? `I${pascalCaseOperationId}RequestHeader,` : "" %>
    <%= paramTsType ? `I${pascalCaseOperationId}RequestParam,` : "" %>
    <%= queryTsType ? `I${pascalCaseOperationId}RequestQuery,` : "" %>
    <%= bodyTsType ? `I${pascalCaseOperationId}RequestBody,` : "" %>
    Successful<%= pascalCaseOperationId %>Response,
} from "<%= requestFile %>";
<% for (const successResponse of [...ownSuccessResponses, ...sharedSuccessResponses]) { %>
import { <%= successResponse.name %>Response } from "<%= successResponseImportPath(successResponse) %>";
<% } %>

export class <%= pascalCaseOperationId %>RequestCommand extends RequestCommand implements I<%= pascalCaseOperationId %>Request {
    public override readonly method = definition.method as HttpMethod.<%= method %>;
    public override readonly path = definition.path;

    public <%= headerTsType ? `override` : `declare` %> readonly header: <%= headerTsType ? `I${pascalCaseOperationId}RequestHeader` : `undefined` %>;
    public  <%= paramTsType ? `override` : `declare` %> readonly param: <%= paramTsType ? `I${pascalCaseOperationId}RequestParam` : `undefined` %>;
    public <%= queryTsType ? `override` : `declare` %> readonly query: <%= queryTsType ? `I${pascalCaseOperationId}RequestQuery` : `undefined` %>;
    public <%= bodyTsType ? `override` : `declare` %> readonly body: <%= bodyTsType ? `I${pascalCaseOperationId}RequestBody` : `undefined` %>;

    private readonly responseValidator: <%= pascalCaseOperationId %>ResponseValidator;

    public constructor(input: Omit<I<%= pascalCaseOperationId %>Request, "method" | "path">) {
        super();

        <% if (headerTsType) { %>
        this.header = input.header;
        <% } %>

        <% if (paramTsType) { %>
        this.param = input.param;
        <% } %>

        <% if (queryTsType) { %>
        this.query = input.query;
        <% } %>

        <% if (bodyTsType) { %>
        this.body = input.body;
        <% } %>

        this.responseValidator = new <%= pascalCaseOperationId %>ResponseValidator();
    }

    public processResponse(
        response: IHttpResponse, 
        options: ProcessResponseOptions
    ): Successful<%= pascalCaseOperationId %>Response {
        try {
            const result = this.responseValidator.validate(response);

            <% for (const successResponse of [...ownSuccessResponses, ...sharedSuccessResponses]) { %>
                if (result instanceof <%= successResponse.name %>Response) {
                    return result;
                }
            <% } %>

            throw result;
        } catch (error) {
            if (error instanceof ResponseValidationError) {
                const unknownResponse = new UnknownResponse(
                    response.statusCode,
                    response.header,
                    response.body,
                    error
                );

                if (options.unknownResponseHandling === "passthrough" && options.isSuccessStatusCode(response.statusCode)) {
                    return unknownResponse as any;
                }

                throw unknownResponse;
            }
            throw error;
        }
    }
}